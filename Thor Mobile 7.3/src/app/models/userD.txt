//const bcrypt = require('bcrypt-nodejs');
const mongoose = require('mongoose');


const userSchema = new mongoose.Schema({
        name: { type: String, required: true },
        lastname: { type: String, required: true },
        email: { type: String, unique: true, lowercase: true, required: true },
        date: { type: Date, required: true },
        nickname: { type: String, unique: true, required: true },
        password: { type: String, required: true }

}, {
                timestamps: true
        });


/* userSchema.pre('save', function (next) {
        const usuario = this;
        if (!usuario.isModified('password')) {
                return next();
        }

        bcrypt.genSalt(10, (err, salt) => {
                if (err) {
                next(err);
                }
        bcrypt.hash(usuario.password, salt, null, (err, hash) => {
                if (err) {
                next(err)
                        }
                usuario.password = hash;
                next();
                });
        });
});

userSchema.methods.compararPassword = function(password, callback) {
        bcrypt.compare(password, this.password, (err, sonIguales) => {
                if (err) {
                return callback(err); 
                }
                callback(null, sonIguales)
        });
};
 */

module.exports = mongoose.model('User', userSchema);



